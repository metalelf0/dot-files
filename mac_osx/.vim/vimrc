set t_Co=256
set nocompatible
set number
set ruler
syntax on
set encoding=utf-8
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" set list listchars=tab:\ \ ,trail:Â·
set hlsearch
set incsearch
set ignorecase
set smartcase
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
set laststatus=2
" set cul
set autoindent

set wrap
set linebreak
set nolist  " list disables linebreak

let g:molokai_original=0

" make rvm happy
set shell=/bin/sh

augroup BgHighlight
  autocmd!
  autocmd WinEnter * set cul
  autocmd WinLeave * set nocul
augroup END


" rvm ruby configuration
" let g:ruby_path="/Users/metalelf0/.rvm/bin/ruby"

" Show (partial) command in the status line
set showcmd

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Include user's local vim config
if filereadable(expand("~/Dropbox/vim.local/macros.rc"))
  source ~/Dropbox/vim.local/macros.rc
endif

" Include user's local vim config
if filereadable(expand("~/Dropbox/vim.local/vimrc"))
  source ~/Dropbox/vim.local/vimrc
endif

function! NeatFoldText() "{{{2
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}2

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" double tap esc to clear highlighting after search
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>

" :w!! saves a file as root
cmap w!! w !sudo tee % >/dev/null

function! DeleteRubyComments()
  g/#.*$/d
endfunction

nmap <silent> <Leader>dc call DeleteRubyComments()


" Use modeline overrides
set modeline
set modelines=10

" Directories for swp files
set backupdir=~/.vim_backup
set directory=~/.vim_backup

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" plugin configuration {{{1

" " NERDTree configuration
" let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
" nmap <Tab><Tab> :NERDTreeToggle<CR>
" map <Leader>f :NERDTreeFind<CR>

" nmap <Tab><Tab> :vsplit .<CR>

" NERDCommenter configuration
" add extra spaces around delimiters
let NERDSpaceDelims=1

let g:vroom_detect_spec_helper=1

function! VroomUseRspec1x()
  let g:vroom_rspec_version="1.x"
  let g:vroom_spec_command="spec "
endfunction

function! VroomUseRspec2x()
  let g:vroom_rspec_version="2.x"
  let g:vroom_spec_command="rspec "
endfunction

" gist-vim defaults
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

"" Github flavoured markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" CTags
noremap <Leader>rt :!ctags --extra=+f -R *<CR><CR>
noremap <C-\> :tnext<CR>

" pomodoro.vim
let g:pomodoro_time_work = 25
let g:pomodoro_time_slack = 5
let g:pomodoro_do_log = 1
let g:pomodoro_log_file = "/Users/metalelf0/Documents/pomodoro_log.txt"

" http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim
" http://got-ravings.blogspot.it/2008/08/vim-pr0n-making-statuslines-that-own.html

    " set statusline=
    " set statusline +=%#Identifier#\ %n\ %*                  " buffer number
    " set statusline +=%#PreProc#%{&ff}%*                     " file format
    " set statusline +=%#Number#%y%*                          " file type
    " set statusline +=%#String#\ %<%t%*                      " full path
    " set statusline +=%#SpecialKey#%m%*                      " modified flag
    " set statusline +=%#Identifier#\ %{PomodoroStatus()}\ %* " pomodoro status
    " set statusline +=%=%*                                   " padding
    " set statusline +=%#Identifier#%5l%*                     " current line
    " set statusline +=%#SpecialKey#/%L%*                     " total lines
    " set statusline +=%#Identifier#%4v\ %*                   " virtual column number
    " set statusline +=%#SpecialKey#0x%04B\ %*                " character under cursor

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" -k means 'only filetypes known to ACK'
"  if something is missing, look into ack --help-types
let g:ackprg='/usr/local/bin/ack -H --nocolor --nogroup --column'
let g:agprg='/Users/metalelf0/bin/agg --column'

let @l='Hilet(:WbEa)f=r{A }jH'
let @n='Gy17kggP<Esc>:read !gdate "+\%B \%d, \%A"kJ'

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

 " let Vundle manage Vundle " required!
  Bundle 'gmarik/vundle'
  Bundle 'Valloric/YouCompleteMe'
  Bundle 'metalelf0/vimt0d0.git'
  Bundle 'mileszs/ack.vim.git'
  Bundle 'scrooloose/nerdcommenter.git'
  Bundle 'scrooloose/syntastic.git'
  Bundle 'tpope/vim-fugitive.git'
  Bundle 'tpope/vim-rails.git'
  Bundle 'tpope/vim-surround.git'
  Bundle 'tpope/vim-dispatch'
  Bundle 'tpope/vim-rvm'
  Bundle 'tpope/vim-vinegar'
  Bundle 'tpope/vim-unimpaired'
  Bundle 'mattn/gist-vim'

  " required for gist-vim to work
  Bundle 'mattn/webapi-vim'

  Bundle 'vim-scripts/Align'
  Bundle 'vim-scripts/bufexplorer.zip'
  Bundle 'vim-scripts/vim-indent-object'
  Bundle 'vim-scripts/LustyJuggler'
  Bundle 'vim-ruby/vim-ruby'
  Bundle 'rking/vim-ruby-refactoring'
  Bundle 'skwp/vim-rspec'
  Bundle 'kien/ctrlp.vim'
  Bundle 'kchmck/vim-coffee-script'
  Bundle 'metalelf0/vim-pomodoro'
  Bundle 'jtratner/vim-flavored-markdown'
  Bundle 'SirVer/ultisnips'
  Bundle 'aalvarado/ultisnips-snippets'
  " Bundle 'bling/vim-airline'
  Bundle 'itchyny/lightline.vim'
  Bundle 'Lokaltog/vim-easymotion'
  Bundle 'rking/ag.vim'
  " Bundle 'bronson/vim-trailing-whitespace'
  Bundle 'justinmk/vim-sneak'
  " Bundle 'Yggdroot/indentLine'

  " colorschemes
  Bundle 'Pychimp/vim-luna'
  Bundle 'Pychimp/vim-sol'
  Bundle 'Valloric/vim-valloric-colorscheme'
  Bundle 'chriskempson/base16-vim'
  Bundle 'chriskempson/vim-tomorrow-theme'
  Bundle 'dhruvasagar/vim-railscasts-theme'
  Bundle 'euclio/vim-nocturne'
  Bundle 'jaromero/vim-monokai-refined'
  Bundle 'johnallen3d/made-of-code.vim'
  Bundle 'julienXX/Hemisu'
  Bundle 'junegunn/seoul256.vim'
  Bundle 'metalelf0/Sift'
  Bundle 'metalelf0/Smyck-Color-Scheme.git'
  Bundle 'molok/vim-vombato-colorscheme'
  Bundle 'nanotech/jellybeans.vim'
  Bundle 'vim-scripts/blackboard.vim'
  Bundle 'vim-scripts/mayansmoke'
  Bundle 'baverman/vim-babymate256'
  Bundle 'gregsexton/Muon'

  " Bundle 'Shougo/unite.vim'
  " Bundle 'Shougo/vimproc.vim'

" drastic remaps!
noremap H ^
noremap L $
inoremap kj <Esc>

nnoremap <C-j> :bprevious<CR>
nnoremap <C-k> :bnext<CR>

" macbook remaps!
nnoremap <D-Right> :tabnext<CR>
nnoremap <D-Left>  :tabprevious<CR>

" " xmpfilter
" map <Leader>xa <Plug>(xmpfilter-mark)
" map <Leader>xr <Plug>(xmpfilter-run)

" bufexplorer
" don't go to the active window
let g:bufExplorerFindActive=0

" ultisnips
function! g:UltiSnips_Complete()
    call UltiSnips_ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips_JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"

nnoremap <D-Up> :bn<CR>
nnoremap <D-Down> :bp<CR>
nnoremap <silent> <Space> za

function! Agg(pattern)
  Ag pattern $(git ls-files)
endfunction

set foldlevelstart=20

" Extra vimrc {{{
let s:extrarc = expand($HOME . '/.vim/passwords.vim')
if filereadable(s:extrarc)
    exec ':so ' . s:extrarc
endif
" }}}

let g:lightline = {
      \ 'colorscheme': 'Tomorrow',
      \ 'component': {
      \   'readonly': '%{&readonly?"â­¤":""}',
      \ }
      \ }

" speedy terminal
" ----------------------------------- 
set ttyfast
set notimeout
set ttimeout
set ttimeoutlen=100
syntax sync minlines=256
set synmaxcol=500

source ~/.vim/metalelf0-lightline.vim
